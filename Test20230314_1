package Test;

public class Test38_StringDemo {
/**
 * 
 * @param args
 * String表示一个字符串，内部使用字符数组实现，不能被继承（最终类），不可变，是finally类型的；
 */
	

	public static void main(String[] args) {
		//String 的两种赋值方式，Java推荐使用“直接赋值”
		
		//直接赋值
		String s1 = "杨";
		
		//使用new关键字创建对象，new:表示申请内存空间
		//面试题：以下代码创建了几个对象？2个；
		//先在常量池中查找对象，如没有对象，则先在常量池中创建一个对象，然后使用new操作符再在堆中生成一个内存空间创建一个对象
		String s2 = new String("杨");
		
		String s3 = "杨";
		
		
		System.out.println(s1 == s2);
		System.out.println(s1 == s3);
		
		System.out.println(s1.equals(s2));

		//代码示例：4种情况分析:直接赋值字符串连接时，考虑编译期和运行期
		//如果在编译期值可以被确定，那么就使用已有对象，否则会创建新的对象
		String a = "a";
		String a1 = a+1;//此处a的值在编译期不能被确定，因为a+1是一个变量，要等到运行期才能被确定下来，运行时32行走完，33走才知道a的值
		String a2 = "a1";//a2在编译期就能被确定，所以a1在常量池中，a2在堆中；
		System.out.println(a1 == a2);
		
		final String b =  "b";//final代表常量的意思
		String b1 = b+1;//编译期b就等于“b”
		String b2 = "b1";
		System.out.println(b1 == b2);
		
		String c = getC();//c的值是通过一个方法，而方法只有在运行期才可知
		String c1 = c+1;
		String c2 = "c1";
		System.out.println(c1 == c2);
		
		final String d = getD();//d的值是通过一个方法，而方法只有在运行期才可知,虽然final是常量，但该常量也得等到运行期才可知
		String d1 = d+1;
		String d2 = "d1";
		System.out.println(d1 == d2);
	}

	private static String getC() {
		return "c";
	}

	private static String getD() {
		return "d";
	}
}
]

