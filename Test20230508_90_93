package Test;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class Test93_MutilClient {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		//创建一个socket对象，指定要连接的服务器
		try {
			Socket socket = new Socket("localhost",6666);
			PrintStream ps= new PrintStream(new BufferedOutputStream(socket.getOutputStream()));
			BufferedReader buf = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			System.out.println("请输入：");
			String info = input.next();
			ps.println(info);
			ps.flush();
			//读取服务器端返回的数据
			info = buf.readLine();
			System.out.println(info);
			ps.close();
			buf.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
---------------------------------------------------------------------
package Test;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * 处理多个客户端
 * 主线程用于监听客户端的连接，每次有连接成功，开启一个线程来处理该客户端的信息
 * @author yangzixi
 *
 */
public class Test93_MutilServer {

	public static void main(String[] args) {
		ExecutorService es = Executors.newFixedThreadPool(3);
		try {
			ServerSocket server = new ServerSocket(6666);
			System.out.println("服务器已启动，正在等待连接。。。");
			while(true) {
			Socket s = server.accept();
			System.out.println(s.getInetAddress().getHostAddress());
			es.execute(new UserThread(s));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
/**
 * 用来处理客户端请求的线程任务
 * @author yangzixi
 *
 */
class UserThread implements Runnable{
	private Socket s;
	public UserThread(Socket s) {
		this.s = s;
	}
	@Override
	public void run() {
		try {
			BufferedReader buf = new BufferedReader(new InputStreamReader(s.getInputStream()));
			PrintStream ps = new PrintStream(new BufferedOutputStream(s.getOutputStream()));
			String info = buf.readLine();
			ps.println("echo"+info);
			ps.flush();
			ps.close();
			buf.close();
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
}

