package Test;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Properties;

/**
 * 通过内省的API来装配一个Bean对象，Bean对象的值是通过配置文件中来获取
 * 目的是为了提高可维护性
 * @author yangzixi
 *
 */
public class Test101_BeanFactory {
	
	private static Properties prop = new Properties();
	//使用静态代码块读取文件
	static {
		//.getContextClassLoader()返回此线程的上下文ClassLoader
		//.getResourceAsStream()返回用于读取指定资源的输入流。
		InputStream in = Thread.currentThread().getContextClassLoader()
		.getResourceAsStream("Test/config.properties");
		try {
			//加载
			prop.load(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 获取一个Bean
	 * @param name
	 * @return
	 */
	public static Object getBean(String name) {
		Object bean = null;
		/**
		 * .getProperty(name)
		 * 在此属性列表中搜索具有指定键的属性。 
		 * 如果在此属性列表中找不到该键，则会检查默认属性列表及其默认值（递归）。 如果未找到该属性，则该方法返回默认值参数。
		 */
		String beanName = prop.getProperty(name);
		try {
			Class<?> aclass = Class.forName(beanName);
			bean = aclass.newInstance();
			//通过内省的类信息获取JavaBean的描述信息
			BeanInfo beanInfo =  Introspector.getBeanInfo(aclass);
			//通过JavaBean描述信息，获取该类的所有属性描述器
			PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
			for (int i = 0; i < propertyDescriptors.length; i++) {
				String propertyName = propertyDescriptors[i].getName();	
				//.getWriteMethod()获取应该用于写入属性值的方法。
				Method writeMethod = propertyDescriptors[i].getWriteMethod();
				if("username".equals(propertyName)) {
					//调用了属性的set方法
					writeMethod.invoke(bean, prop.getProperty("bean.username"));
				}else if("password".equals(propertyName)){
					writeMethod.invoke(bean, prop.getProperty("bean.password"));
				}else if("url".equals(propertyName)){
					writeMethod.invoke(bean, prop.getProperty("bean.url"));
				}
			}
		} catch (ClassNotFoundException|IntrospectionException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} 
		return bean;
	}
}
---------------------------------------------------------------------
package Test;

import org.junit.jupiter.api.Test;

public class Test101_BeanTest {
	@Test
	public void getBeanTest() {
		Test101_Config bean	= (Test101_Config) Test101_BeanFactory.getBean("bean.name");
		System.out.println(bean);
	}
}
---------------------------------------------------------------------
package Test;
/**
 * config.properties
 * @author yangzixi
 *
 */
public class Test101_Config {

	private String username;
	private String password;
	private String url;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public Test101_Config(String username, String password, String url) {
		super();
		this.username = username;
		this.password = password;
		this.url = url;
	}
	public Test101_Config() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
	public String toString() {
		return "Test101_Config [username=" + username + ", password=" + password + ", url=" + url + "]";
	}
	
	
}
-------------------------------------------------------------------
bean.name = Test.Test101_Config
bean.username = admin123
bean.password = 123
bean.url = http://www.baidu.com
