package Test;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

public class Test92_EchoClient {

	public static void main(String[] args) {
		//创建一个socket对象，指定要连接的服务器
		try {
			Socket socket = new Socket("localhost",6666);//6666为端口号
			PrintStream ps= new PrintStream(new BufferedOutputStream(socket.getOutputStream()));
			BufferedReader buf = new BufferedReader(new InputStreamReader(socket.getInputStream()));

			ps.println("hellow,yang");
			ps.flush();
			//读取服务器端返回的数据
			String info = buf.readLine();
			System.out.println(info);
			ps.close();
			buf.close();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
-----------------------------------------------------------------
package Test;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class Test92_EchoServer {

	public static void main(String[] args) {
		//创建一个服务器端的Socket（1024～65535）
		try {
			ServerSocket server = new ServerSocket(6666);
			System.out.println("服务器已启动，正在客户端的连接。。。。");
			//等待客户端的连接，造成阻塞，如果有客户端连接成功，立即返回一个Socket对象
			Socket socket = server.accept();
			System.out.println("客户端连接成功"+server.getInetAddress().getHostAddress());//getInetAddress()返回此服务器套接字的本地地址。
			BufferedReader buf = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			//通过输入流读取网络数据,如果没有数据，也会造成阻塞
			String info = buf.readLine();
			System.out.println(info);
			//获取输出流，向客户端返回信息
			PrintStream ps = new PrintStream(new BufferedOutputStream(socket.getOutputStream()));
			
			ps.println("echo:"+info);
			ps.flush();
			//关闭
			ps.close();
			buf.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}

