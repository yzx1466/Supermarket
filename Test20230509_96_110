package Test;

public class Test110_Person {

	private String personid;
	private String name;
	private String address;
	private String tel;
	private String fax;
	private String email;
	
	public String getPersonid() {
		return personid;
	}
	public void setPersonid(String personid) {
		this.personid = personid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getTel() {
		return tel;
	}
	public void setTel(String tel) {
		this.tel = tel;
	}
	public String getFax() {
		return fax;
	}
	public void setFax(String fax) {
		this.fax = fax;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	@Override
	public String toString() {
		return "Test110_Person [personid=" + personid + ", name=" + name + ", address=" + address + ", tel=" + tel
				+ ", fax=" + fax + ", email=" + email + "]";
	}
	
	
}
--------------------------------------------------------------------------
package Test;

import java.util.ArrayList;
import java.util.List;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class Test110_PersonHandler extends DefaultHandler{

	private List<Test110_Person> persons =null;
	private Test110_Person p;
	private String tag;
	
	public List<Test110_Person> getPersons(){
		return persons;

	}
	@Override
	public void startDocument() throws SAXException {
		// TODO Auto-generated method stub
		super.startDocument();
		persons = new ArrayList<>();
		System.out.println("开始解析文档");
	}

	@Override
	public void endDocument() throws SAXException {
		// TODO Auto-generated method stub
		super.endDocument();
		System.out.println("结束解析文档");
	}

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		// TODO Auto-generated method stub
		super.startElement(uri, localName, qName, attributes);
		if("person".equals(qName)) {
			p = new Test110_Person();
			String personid = attributes.getValue("personid");
			p.getPersonid();
		}
		tag = qName;
	}

	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		// TODO Auto-generated method stub
		super.endElement(uri, localName, qName);
		if ("person".equals(qName)) {
			persons.add(p);
		}
		tag = null;
	}

	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		// TODO Auto-generated method stub
		super.characters(ch, start, length);
		if (tag!=null) {
			if("name".equals(tag)) {
				p.setName(new String(ch,start,length));
			}else if("address".equals(tag)) {
				p.setAddress(new String(ch,start,length));
			}else if("tel".equals(tag)) {
				p.setTel(new String(ch,start,length));
			}else if("fax".equals(tag)) {
				p.setFax(new String(ch,start,length));
			}else if("email".equals(tag)) {
				p.setEmail(new String(ch,start,length));
			}
			System.out.println(ch);
		}
	}

	
}
----------------------------------------------------------------------
package Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.junit.Test;
import org.xml.sax.SAXException;

//"详情下拉见“Test110.xml”文件"
public class Test110_XML {
	@Test
	public void saxParseXML() throws ParserConfigurationException, SAXException, IOException {
		//创建SAX解析器工厂对象
		SAXParserFactory spf = SAXParserFactory.newInstance();
		//使用解析器工厂创建解析器实例
		SAXParser saxParser = spf.newSAXParser();
		//创建SAX解析器要使用的时间侦听器对象
		Test110_PersonHandler personHandler = new Test110_PersonHandler();
		//开始解析文件
		InputStream is = Thread.currentThread().getContextClassLoader()
				.getResourceAsStream("Test/Test110.xml");
		saxParser.parse(is, personHandler);
		List<Test110_Person> persons = personHandler.getPersons();
		for (Test110_Person p : persons) {
			System.out.println(p);
		}
	}
}
--------------------------------------------------------------------
<?xml version = "1.0" encoding = "UTF-8"?>
<people>
	<aa:person personid = "E01">
		<name>Tony Blair</name>
		<address>10 Downing Street,London,UK</address>
		<tel>(061) 98765</tel>
		<fax>(061) 98765</fax>
		<email>blair@everywhere.com</email>
	</aa:person>
	<person personid = "E02">
		<name>Bill Clinton</name>
		<address>White House,USA</address>
		<tel>(001) 6400 98765</tel>
		<fax>(001) 6400 98765</fax>
		<email>blair@everywhere.com</email>
	</person>

</people>
