package Test;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import javax.xml.parsers.*;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.Xpp3DomDriver;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
//"详情下拉见“Test110.xml”文件"
public class Test110_XML {
	/**
	 * 使用第三方的xStream组件实现XML的解析与生成
	 */
	@Test
	public void xStream(){
		Test110_Person p = new Test110_Person();
		p.setPersonid("E01");
		p.setAddress("深圳");
		p.setEmail("1234-2345-3456");
		p.setFax("123456");
		p.setTel("15814669566");
		p.setName("杨子熙");

		XStream xStream = new XStream(new Xpp3DomDriver());
		xStream.alias("person",Test110_Person.class);
		xStream.useAttributeFor(Test110_Person.class,"personid");
		String xml = xStream.toXML(p);
		System.out.println(xml);

		//解析XML
//		Test110_Person person = (Test110_Person) xStream.fromXML(xml);
//		System.out.println(person);
	}


	/**
	 * 把对象转成XML文件写入
	 */
	@Test
	public void xmlEncoder() throws FileNotFoundException {
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("yzx.xml"));
		XMLEncoder xmlEncoder = new XMLEncoder(bos);
		Test110_Person p = new Test110_Person();
		p.setPersonid("E01");
		p.setAddress("深圳");
		p.setEmail("1234-2345-3456");
		p.setFax("123456");
		p.setTel("15814669566");
		p.setName("杨子熙");
		xmlEncoder.writeObject(p);
		xmlEncoder.close();

	}

	/**
	 * 读取写入的XML文件中的对象
	 */
	@Test
	public void xmlDecoder() throws FileNotFoundException {
		BufferedInputStream in = new BufferedInputStream(new FileInputStream("Test/yzx.xml"));
		XMLDecoder xmlDecoder = new XMLDecoder(in);
		Test110_Person p = (Test110_Person) xmlDecoder.readObject();
		System.out.println(p);
	}


	/**
	 * DOM4J解析XML文件
	 * 基于树形结构，第三方组件
	 * 解析数度快，效率高，使用Java中的迭代器实现数据读取，在WEB框架中使用较多（Hibernate）
	 *
	 */
	@Test
	public void DOM4JParseXML() throws DocumentException {
		//1、创建DOM4J解析器对象
		SAXReader reader = new SAXReader();
		InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("Test/Test110.xml");
		org.dom4j.Document doc = reader.read(is);
		org.dom4j.Element rootElement = doc.getRootElement();
		Iterator<org.dom4j.Element> iterator = rootElement.elementIterator();
		ArrayList<Test110_Person> persons = new ArrayList<>();
		Test110_Person p = null;
		while (iterator.hasNext()) {
			p = new Test110_Person();
			org.dom4j.Element e = iterator.next();
			p.setPersonid(e.attributeValue("personid"));
			Iterator<org.dom4j.Element> iterator1 = e.elementIterator();
			while (iterator1.hasNext()) {
				org.dom4j.Element next = iterator1.next();
				String tag = next.getName();
				if ("name".equals(tag)) {
					p.setName(next.getText());
				} else if ("address".equals(tag)) {
					p.setAddress(next.getText());
				} else if ("tel".equals(tag)) {
					p.setTel(next.getText());
				} else if ("fax".equals(tag)) {
					p.setFax(next.getText());
				} else if ("email".equals(tag)) {
					p.setEmail(next.getText());
				}
			}
			persons.add(p);
		}
		System.out.println("结果为：" + Arrays.toString(persons.toArray()));
	}
//		for (Iterator<org.dom4j.Element> it = iterator; it.hasNext(); ) {
//		p = new Test110_Person();
//		org.dom4j.Element e = iterator.next();
//		p.setPersonid(e.attributeValue("personid"));
//		Iterator<org.dom4j.Element> iterator1 = e.elementIterator();
//		for (Iterator<org.dom4j.Element> iter = iterator1; iter.hasNext(); ) {
//			org.dom4j.Element next = iterator1.next();
//			String tag = next.getName();
//			if ("name".equals(tag)){
//				p.setName(next.getText());
//			}else if ("address".equals(tag)) {
//				p.setAddress(next.getText());
//			} else if ("tel".equals(tag)){
//				p.setTel(next.getText());
//			} else if ("fax".equals(tag)) {
//				p.setFax(next.getText());
//			} else if ("email".equals(tag)) {
//				p.setEmail(next.getText());
//			}
//		}
//		persons.add(p);
//	}
//		System.out.println("结果为："+Arrays.toString(persons.toArray()));



	/**
	 * JDOM解析XML
	 * 1、与DOM类似基于树形结构，
	 * 2、与DOM的区别：
	 * 1）第三方开源的组件
	 * 2）实现使用Java的Collection接口
	 * 3）效率比DOM更快
	 */
	@Test
	public void JDOMParseXML() throws IOException, JDOMException {
		//创建JDOM解析器
		SAXBuilder builder = new SAXBuilder();
		InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("Test/Test110.xml");
		org.jdom2.Document build = builder.build(is);
		org.jdom2.Element rootElement = build.getRootElement();
		List<Test110_Person> list = new ArrayList<>();
		Test110_Person person = null;
		List<org.jdom2.Element> children = rootElement.getChildren();
		for(org.jdom2.Element element : children){
			person = new Test110_Person();
			String personid = element.getAttributeValue("personid");
			person.setPersonid(personid);
			List<org.jdom2.Element> children1 = element.getChildren();
			for(org.jdom2.Element e :children1){
				String tag = e.getName();
				if ("name".equals(tag)){
					person.setName(e.getText());
				}else if ("address".equals(tag)) {
					person.setAddress(e.getText());
				} else if ("tel".equals(tag)){
					person.setTel(e.getText());
				} else if ("fax".equals(tag)) {
					person.setFax(e.getText());
				} else if ("email".equals(tag)) {
					person.setEmail(e.getText());
				}
			}
			list.add(person);
		}
		System.out.println("结果："+Arrays.toString(list.toArray()));
	}


	/**
	 * DOM解析XML
	 * 1、基于树形结构，通过解析器一次性把文档加载到内存中，所以会比较占内存，可以随机访问，更加灵活。更适合在WEB开发中使用
	 */
	@Test
	public void DOMParseXMl() throws ParserConfigurationException, IOException, SAXException {
		//1、创建一个DOM解析器工厂对象
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//2、通过工厂对象创建解析器对象
		DocumentBuilder documentBuilder = factory.newDocumentBuilder();
		//3、解析文档
		InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("Test/Test110.xml");
		//此代码完成后，整个XML文档已经被加载到内存中，以树状形式存储
		Document doc = documentBuilder.parse(is);
		//4、从内存中读取数据

		//获取节点名称为person的所有节点，返回节点集合
		NodeList personNodeList = doc.getElementsByTagName("person");
		ArrayList<Test110_Person> person = new ArrayList<>();
		Test110_Person p = null;
		//此循环会迭代两次
		for (int i = 0; i < personNodeList.getLength(); i++) {
			Node personNode = personNodeList.item(i);
			p = new Test110_Person();
			//获取节点的属性值
			String personid = personNode.getAttributes().getNamedItem("personid").getNodeValue();
			p.setPersonid(personid);
			//获取当前节点的所有子节点
			NodeList childNodes = personNode.getChildNodes();
			for (int j = 0; j < childNodes.getLength(); j++) {
				Node item = childNodes.item(j);
				String nodeName = item.getNodeName();
				if ("name".equals(nodeName)) {
					p.setName(item.getFirstChild().getNodeValue());
				}else if ("address".equals(nodeName)){
					p.setAddress(item.getFirstChild().getNodeValue());
				} else if ("tel".equals(nodeName)) {
					p.setTel(item.getFirstChild().getNodeValue());
				} else if ("fax".equals(nodeName)) {
					p.setFax(item.getFirstChild().getNodeValue());
				} else if ("email".equals(nodeName)) {
					p.setEmail(item.getFirstChild().getNodeValue());
				}
			}
			person.add(p);
		}
		System.out.println("结果是："+ Arrays.toString(person.toArray()));
	}


	/**
	 * SAX解析XML
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	@Test
	public void saxParseXML() throws ParserConfigurationException, SAXException, IOException {
		//1、创建一个SAX解析器工厂对象
		SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
		//2、通过工厂对象创建SAX解析器
		SAXParser saxParser = saxParserFactory.newSAXParser();
		//3、创建一个数据处理器（需要自己编写）
		Test110_PersonHandler personHandler = new Test110_PersonHandler();
		//4、开始解析
		InputStream is = Thread.currentThread().getContextClassLoader()
				.getResourceAsStream("Test/Test110.xml");
		saxParser.parse(is,personHandler);
		List<Test110_Person> persons = personHandler.getPersons();
		for (Test110_Person p : persons) {
			System.out.println(p);
		}
	}
}
----------------------------------------------------------------------
package Test;

import java.util.ArrayList;
import java.util.List;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * SAX解析的特点：
 * 1、基于事件驱动
 * 2、顺序读取，速度快（从上至下依次读取）
 * 3、不能任意读取节点（灵活性差）
 * 4、SAX更适用于在性能要求更高的设备上使用
 * 5、解析时占用的内存小
 */
public class Test110_PersonHandler extends DefaultHandler{
	private List<Test110_Person> persons = null;
	private Test110_Person p;//当前正在解析的Person对象
	private String tag;//用于记录当前正在解析的标签名（元素名）

	public List<Test110_Person> getPersons(){
		return persons;

	}
	//开始解析文档时调用
	@Override
	public void startDocument() throws SAXException {
		super.startDocument();
		persons = new ArrayList<>();
		System.out.println("开始解析文档");
	}

	//在XML文档解析结束时调用
	@Override
	public void endDocument() throws SAXException {
		super.endDocument();
		System.out.println("解析文档结束");
	}
	/**
	 * 解析开始元素时调用
	 * @param uri 命名空间
	 * @param localName 不带前缀的标签名
	 * @param qName 带前缀的标签名("aa:"就是Person的前缀)
	 * @param attributes 当前标签的属性集合
	 * @throws SAXException
	 */
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		super.startElement(uri, localName, qName, attributes);
		if("person".equals(qName)) {
			p = new Test110_Person();
			String personid = attributes.getValue("personid");
			p.setPersonid(personid);
		}
		tag = qName;
		System.out.println("startElement--"+qName);
	}
	//解析结束元素时调用
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		super.endElement(uri, localName, qName);
		if ("person".equals(qName)) {
			persons.add(p);
		}
		tag = null;
		System.out.println("endElement--"+qName);
	}
	//解析文本内容时调用
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		super.characters(ch, start, length);
		if (tag != null) {
			if ("name".equals(tag)) {
				p.setName(new String(ch,start,length));
			}else if("address".equals(tag)){
				p.setAddress(new String(ch ,start,length));
			}else if("tel".equals(tag)) {
				p.setTel(new String(ch,start,length));
			}else if("fax".equals(tag)) {
				p.setFax(new String(ch,start,length));
			}else if("email".equals(tag)) {
				p.setEmail(new String(ch,start,length));
			}
			System.out.println(ch);
		}
	}
}
-----------------------------------------------------------------------
package Test;

public class Test110_Person {

	private String personid;
	private String name;
	private String address;
	private String tel;
	private String fax;
	private String email;
	public String getPersonid() {
		return personid;
	}
	public void setPersonid(String personid) {
		this.personid = personid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getTel() {
		return tel;
	}
	public void setTel(String tel) {
		this.tel = tel;
	}
	public String getFax() {
		return fax;
	}
	public void setFax(String fax) {
		this.fax = fax;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	@Override
	public String toString() {
		return "Test110_Person [personid=" + personid + ", name=" + name + ", address=" + address + ", tel=" + tel
				+ ", fax=" + fax + ", email=" + email + "]";
	}
	
	
}
-------------------------------------------------------------------------
<?xml version = "1.0" encoding = "UTF-8"?>
<people>
	<person personid = "E01">
		<name>Tony Blair</name>
		<address>10 Downing Street,London,UK</address>
		<tel>(061) 98765</tel>
		<fax>(061) 98765</fax>
		<email>blair@everywhere.com</email>
	</person>
	<person personid = "E02">
		<name>Bill Clinton</name>
		<address>White House,USA</address>
		<tel>(001) 6400 98765</tel>
		<fax>(001) 6400 98765</fax>
		<email>blair@everywhere.com</email>
	</person>

</people>
