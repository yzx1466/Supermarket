package Test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
/**
 * Collection接口：用于存储单个对象的集合
 * List接口：
 * 1、有序的，可以重复
 * 2、允许多个null元素
 * 3、具体的实现有常用的：ArrayList、Vector、LinkedList
 * 在实现开发中，我们如何选择list的具体实现？
 * 1、安全性（首选Vector，其次就是ArrayList）
 * 2、是否频繁插入/删除操作（LinkedList）
 * 3、是否存储后遍历（ArrayList）
 * 
 * Set接口：
 * @author yangzixi
 *
 */
public class Test74_List {

	/**
	 * LinkedList
	 * 1、实现原理：采用双向链表结构实现
	 * 2、适合插入、删除操作，性能高
	 * 3、
	 */
	private static void LinkedList() {
		LinkedList<String> list = new LinkedList<>();
		list.add("yzx");
		list.add("杨子熙");
		list.add("慵棘㱄");
		int size  =list.size();
		System.out.println(size);
		for(int i = 0;i<size;i++) {
			System.out.println(list.get(i));
		}
	}
//------------------------------------------------------------------------------------------------
	/**
	 * Vector
	 * 1、实现原理：采用动态对象数组实现，默认构造方法创建了一个大小为10的对象数组
	 * 2、扩充的算法：当增量为0时，扩充为原来大小的2倍，当增量大于0时，扩充为原来大小加上增量
	 * 3、不适合删除或插入操作
	 * 4、为了防止数组动态扩充次数过多，建议创建Vector时，给定初始容量
	 * 5、线程安全的，适合在多线程访问时使用，在单线程下使用效率较低
	 */
	private static void vector() {
		Vector<String> v = new Vector<>();
		v.add("yzx");
		v.add("杨子熙");
		v.add("慵棘㱄");
		
		int size = v.size();
		for(int i=0;i<size;i++) {
			System.out.println(v.get(i));
		}
	}
//------------------------------------------------------------------------------------------------
	/**
	 * ArrayList
	 * 1、实现原理：采用动态对象数组实现，默认构造方法创建了一个空数组
	 * 2、第一次添加元素，扩充容量为10，之后的扩充算法：原来数组大小加上原来数组的一半
	 * 3、不适合进行删除或插入操作
	 * 4、为了防止数组动态扩充次数过多，建议创建ArrayList时，给定初识容量
	 * 5、多线程使用不安全，适合在单线程访问时使用，效率高
	 * JDK1.2开始引入
	 */
	
	private static void arraysList() {
		//使用集合来存储多个不同类型的元素（对象），那么在处理时会比较麻烦，实际开发中，不建议
		//这样使用，我们应该在一个集合中存储相同的类型对象
		List<String> list = new ArrayList<>();//ArrayList​(int initialCapacity)	构造具有指定初始容量的空列表。
		list.add("yzx");
		list.add("杨子熙");
		list.add("慵棘㱄");	
		int size = list.size();
		System.out.println(size);
		for(int i = 0;i<size;i++){
			System.out.println(list.get(i));
		}
		System.out.println("------");
		System.out.println(list.contains("yzx"));//查看列表是否包含指定的元素
		System.out.println("------");
		list.remove("yzx");//删除列表中的指定元素
		System.out.println(list.size());
		System.out.println("------");
		String[] arrays = list.toArray(new String[]{});//输出数组
		for(String s:arrays) {
			System.out.println(s);
		}
		
	}
	public static void main(String[] args) {
		arraysList();
		vector();
		LinkedList();
	}

}

