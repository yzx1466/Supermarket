package Test;

public class Test50_BinaryTree {
	private Node root;
	
	public void add(int data) {
		if(root == null) {
			root = new Node(data);
		}else{
			root.addNode(data);
		}
	}
	//输出节点
	public void print() {
		root.printNode();
	}
	
	private class Node{
		private int data;
		private Node left;
		private Node right;
		public Node(int data) {
			this.data = data;
		}
		
		public void addNode(int data) {
			if(this.data>data) {//传入值小于当前值
				if(this.left == null) {
					this.left = new Node(data);
				}else {
					this.left.addNode(data);
				}
			}else {//传入值大于当前值
				if(this.right == null) {
					this.right = new Node(data);
				}else {
					this.right.addNode(data);
				}
			}
		}
		//中序遍历(先序遍历，后序遍历)
		public void printNode() {
			if(this.left != null) {
				this.left.printNode();
			}
			System.out.print(this.data+"->");
			if(this.right != null) {
				this.right.printNode();
			}
			
		}
	}
}
package Test;

public class Test50_BinaryTreeDemo {
	
	public static void main(String[] args) {
		
		Test50_BinaryTree bt = new Test50_BinaryTree();
		bt.add(8);
		bt.add(3);
		bt.add(4);
		bt.add(7);
		bt.add(1);
		bt.add(12);
		bt.add(24);
		bt.add(46);
		bt.add(10);
		
		bt.print();
	}
	
}
